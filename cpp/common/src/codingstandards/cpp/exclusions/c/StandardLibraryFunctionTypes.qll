//** THIS FILE IS AUTOGENERATED, DO NOT MODIFY DIRECTLY.  **/
import cpp
import RuleMetadata
import codingstandards.cpp.exclusions.RuleMetadata

newtype StandardLibraryFunctionTypesQuery =
  TCtypeFunctionArgNotUnsignedCharOrEofQuery() or
  TMemcpyMemmoveMemcmpArgNotPointersToCompatibleTypesQuery()

predicate isStandardLibraryFunctionTypesQueryMetadata(
  Query query, string queryId, string ruleId, string category
) {
  query =
    // `Query` instance for the `ctypeFunctionArgNotUnsignedCharOrEof` query
    StandardLibraryFunctionTypesPackage::ctypeFunctionArgNotUnsignedCharOrEofQuery() and
  queryId =
    // `@id` for the `ctypeFunctionArgNotUnsignedCharOrEof` query
    "c/misra/ctype-function-arg-not-unsigned-char-or-eof" and
  ruleId = "RULE-21-13" and
  category = "mandatory"
  or
  query =
    // `Query` instance for the `memcpyMemmoveMemcmpArgNotPointersToCompatibleTypes` query
    StandardLibraryFunctionTypesPackage::memcpyMemmoveMemcmpArgNotPointersToCompatibleTypesQuery() and
  queryId =
    // `@id` for the `memcpyMemmoveMemcmpArgNotPointersToCompatibleTypes` query
    "c/misra/memcpy-memmove-memcmp-arg-not-pointers-to-compatible-types" and
  ruleId = "RULE-21-15" and
  category = "required"
}

module StandardLibraryFunctionTypesPackage {
  Query ctypeFunctionArgNotUnsignedCharOrEofQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `ctypeFunctionArgNotUnsignedCharOrEof` query
      TQueryC(TStandardLibraryFunctionTypesPackageQuery(TCtypeFunctionArgNotUnsignedCharOrEofQuery()))
  }

  Query memcpyMemmoveMemcmpArgNotPointersToCompatibleTypesQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `memcpyMemmoveMemcmpArgNotPointersToCompatibleTypes` query
      TQueryC(TStandardLibraryFunctionTypesPackageQuery(TMemcpyMemmoveMemcmpArgNotPointersToCompatibleTypesQuery()))
  }
}
